.progress{

  *,
  *:before,
  *:after {
  -webkit-box-sizing: content-box;
     -moz-box-sizing: content-box;
          box-sizing: content-box;
  }
}

// csstyle v1.1.0
// Clean, Simple Styling for the Web
// http://www.csstyle.io
// Copyright (c) 2014 Dave Geddes
// https://twitter.com/geddski
// https://github.com/geddski

// components
@mixin component($name){
  .#{$name}{
    @content
  }
}

// modifiers
// override components
@mixin modifier($name){
  &.\--#{"" + $name}{
    @content;
  }
}

// allow childs to respond to modifiers on parents
@mixin whenComponentModifier($modifier){
  $index: str-index(#{&}, "__") - 1;
  $component: str-slice(#{&}, 0, $index);

  #{$component}.\--#{$modifier} & {
    @content;
  }
}

// childs 
// make up the structure of a component
// override components
@mixin child($name){
    // check if nested in an modifier
    $modifierIndex: str-index(#{&}, ".\\--");
    $modifierIndex: 0 !default;
    $modifierIndex: $modifierIndex - 1;

    // check if nested in another child
    $childIndex: str-index(#{&}, "__");
    $childIndex: 0 !default;
    $childIndex: $childIndex - 1;

    $component: str-slice(#{&}, 0, $modifierIndex);
    
    // child is nested in an modifier
    @if $modifierIndex > 0 {
      // child is also nested in another child
      @if ($childIndex > 0){
        &__#{"" + $name}{
          @content;
        }
      }
      @else{
        & #{$component}__#{"" + $name}{
          @content;
        }
      }
    }
    @else {
      &__#{"" + $name}{
        @content
      }
    }
}

// tweaks
// override components, modifiers, and modifiers
@mixin tweak($name){
  .\+#{"" + $name}{
    @content;
  }
}


// locations
// override components, childs, modifiers, and tweaks
@mixin location($name){
  .\@#{"" + $name}{
    @content;
  }
}


// -- Config ------------
$backgroundBarColor: #d0d0d0;
$successBarColor: #2ecc71;
$warningBarColor: #f39c12;
$dangerBarColor: #e74c3c;
$overlayColor: #fff;
$backColor: #f2f2f2;
$barHeight: 4px;
$elementSize: 20px;

$step: 1; // step of % (100/$step = number of created classes)
$loops: round(100 / $step);
$increment: 360 / $loops;
$half: round($loops / 2);


// -- Circular progress ------------
@include component(circularProgress) {
  display: inline-block;
  position: relative;
  width: $elementSize;
  height: $elementSize;
  border-radius: 50%;
  //border: 2px solid $backColor; // remove gradient color
  background-color: $backgroundBarColor; // default 100%   


    
    @include child(range) {
      margin-top: $elementSize + 20;
    }
  
  // Text overlay element
  @include child(overlay) {
    position: absolute;
    width: $elementSize - $barHeight;
    height: $elementSize - $barHeight;
    background-color: $overlayColor;
    border-radius: 50%;
    margin-left: $barHeight/2;
    margin-top: $barHeight/2;
    text-align: center;
    line-height: $elementSize - $barHeight;
    font-size: 24px;

  
  }
  
  // Loop for creating modifier classes
  @for $i from 0 through $loops {
        
    $barColor: $successBarColor;
    @if $i <= 66 { $barColor: $warningBarColor; } 
    @if $i <= 33 { $barColor: $dangerBarColor; }

    @include modifier(#{$i*$step}) {
      
      @if $i < $half {
        
        $nextdeg: 90deg + ( $increment * $i );
        background-image: linear-gradient(90deg, $backgroundBarColor 50%, transparent 50%, transparent), linear-gradient($nextdeg, $barColor 50%, $backgroundBarColor 50%, $backgroundBarColor);
      } @else {
        $nextdeg: -90deg + ( $increment * ( $i - $half ) );
        background-image: linear-gradient($nextdeg, $barColor 50%, transparent 50%, transparent), linear-gradient(270deg, $barColor 50%, $backgroundBarColor 50%, $backgroundBarColor);
      }
      
    }
  }
  
}

